name: DevSecOps Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  code_build_and_scan:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      BLACKDUCK_TOKEN: ${{ secrets.BLACKDUCK_TOKEN }}
      BD_URL: https://your-blackduck-instance.com
      TRIVY_TOKEN: ${{ secrets.TRIVY_TOKEN }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      FORTIFY_TOKEN: ${{ secrets.FORTIFY_TOKEN }}
      FORTIFY_URL: https://fortify.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK for SonarQube
      uses: actions/setup-java@v3
      with:
        java-version: '17'

    # SAST - SonarQube
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      with:
        args: >
          -Dsonar.projectKey=your_project_key
          -Dsonar.organization=your_org
          -Dsonar.host.url=https://your-sonarqube.com
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # SAST - Fortify Scan
    - name: Fortify SAST Scan
      run: |
        curl -LO https://github.com/fortify/fortify-cli/releases/latest/download/fortify-cli.zip
        unzip fortify-cli.zip -d fortify-cli
        chmod +x fortify-cli/fortify
        ./fortify-cli/fortify scancentral \
          -bt mvn \
          -upload \
          -project "your_project" \
          -version "1.0" \
          -ssc-url $FORTIFY_URL \
          -ssc-ci-token $FORTIFY_TOKEN

    # SCA - Black Duck
    - name: Black Duck Scan
      run: |
        curl -s -L https://detect.synopsys.com/detect.sh | bash -s -- \
          --blackduck.url=$BD_URL \
          --blackduck.api.token=$BLACKDUCK_TOKEN \
          --detect.project.name="your_project" \
          --detect.project.version.name="1.0" \
          --detect.source.path="."

    # IaC Scan - Checkov
    - name: Checkov IaC Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform

    # Container Image Scan - Trivy
    - name: Build Docker Image
      run: docker build -t your-image-name .

    - name: Trivy Image Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: your-image-name
        format: table
        exit-code: 0
        ignore-unfixed: true

  dast_scan:
    runs-on: ubuntu-latest
    needs: code_build_and_scan

    steps:
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: 'https://your-test-url.com'

  compliance_and_notify:
    runs-on: ubuntu-latest
    needs: dast_scan

    steps:
    # Compliance (placeholder – replace with real tool e.g., OpenSCAP, kube-bench)
    - name: Compliance Check
      run: echo "Run your compliance scan tool here"

    # Manual Penetration Testing
    - name: Manual Penetration Testing (Info)
      run: echo "Manual pen-testing to be performed before prod release."

    # Notify on Slack
    - name: Send Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: "✅ DevSecOps Pipeline completed for ${{ github.repository }} on ${{ github.ref }}"
